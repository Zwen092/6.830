package simpledb.execution;

import simpledb.storage.Field;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate joinPredicate;
    private final OpIterator child1;
    private final OpIterator child2;
    private final TupleDesc tupleDesc1;
    private final TupleDesc tupleDesc2;

    private Tuple lastTuple;


    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
        tupleDesc1 = child1.getTupleDesc();
        tupleDesc2 = child2.getTupleDesc();


    }

    public JoinPredicate getJoinPredicate() {
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return null;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return null;
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(tupleDesc1, tupleDesc2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        //如果在child2里面找到了满足的tuple，则lastTuple不为null，下次迭代，leftTuple保持
        while (lastTuple != null || child1.hasNext()) {
            Tuple leftTuple;
            if (lastTuple != null) {
                leftTuple = lastTuple;
            } else {
                leftTuple = child1.next();
            }

            while (child2.hasNext()) {
                Tuple rightTuple = child2.next();
                if (joinPredicate.filter(leftTuple, rightTuple)) {
                    //I missed this statement, which will cause lastTuple = null forever
                    lastTuple = leftTuple;
                    return buildTuple(leftTuple, rightTuple);
                }
            }
            lastTuple = null;
            child2.rewind();
        }
        return null;
    }

    private Tuple buildTuple(Tuple tuple1, Tuple tuple2) {
        Tuple newTuple = new Tuple(getTupleDesc());
        newTuple.setRecordId(tuple1.getRecordId());
        Iterator<Field> iterator1 = tuple1.fields();
        Iterator<Field> iterator2 = tuple2.fields();
        int idx = 0;
        while (iterator1.hasNext()) {
            newTuple.setField(idx++, iterator1.next());
        }
        while (iterator2.hasNext()) {
            newTuple.setField(idx++, iterator2.next());
        }
        return newTuple;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{this.child1, this.child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {

    }

}
